var dataJson = {"arch":{"ispc":false,"isunix":true,"ismac":false},"build":"example_detumbling","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"/home/samuel/UW-Orbital/simulation-dev/sat-sim/unused_files/example_detumbling_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: ert_main.c\n *\n * Code generated for Simulink model 'example_detumbling'.\n *\n * Model version                  : 1.8\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Nov 12 15:25:21 2022\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex-A\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. Safety precaution\n *    3. RAM efficiency\n *    4. ROM efficiency\n * Validation result: Not run\n */\n\n#include <stddef.h>\n#include <stdio.h>            /* This example main program uses printf/fflush */\n#include \"example_detumbling.h\"        /* Model header file */\n\n/*\n * Associating rt_OneStep with a real-time clock or interrupt service routine\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\n * always associated with the base rate of the model.  Subrates are managed\n * by the base rate from inside the generated code.  Enabling/disabling\n * interrupts and floating point context switches are target specific.  This\n * example code indicates where these should take place relative to executing\n * the generated code step function.  Overrun behavior should be tailored to\n * your application needs.  This example simply sets an error status in the\n * real-time model and returns from rt_OneStep.\n */\nvoid rt_OneStep(void);\nvoid rt_OneStep(void)\n{\n  static boolean_T OverrunFlag = false;\n\n  /* Disable interrupts here */\n\n  /* Check for overrun */\n  if (OverrunFlag) {\n    return;\n  }\n\n  OverrunFlag = true;\n\n  /* Save FPU context here (if necessary) */\n  /* Re-enable timer or interrupt here */\n  /* Set model inputs here */\n\n  /* Step the model */\n  example_detumbling_step();\n\n  /* Get model outputs here */\n\n  /* Indicate task complete */\n  OverrunFlag = false;\n\n  /* Disable interrupts here */\n  /* Restore FPU context here (if necessary) */\n  /* Enable interrupts here */\n}\n\n/*\n * The example main function illustrates what is required by your\n * application code to initialize, execute, and terminate the generated code.\n * Attaching rt_OneStep to a real-time clock is target specific. This example\n * illustrates how you do this relative to initializing the model.\n */\nint_T main(int_T argc, const char *argv[])\n{\n  /* Unused arguments */\n  (void)(argc);\n  (void)(argv);\n\n  /* Initialize model */\n  example_detumbling_initialize();\n\n  /* Attach rt_OneStep to a timer or interrupt service routine with\n   * period 0.2 seconds (base rate of the model) here.\n   * The call syntax for rt_OneStep is\n   *\n   *  rt_OneStep();\n   */\n  printf(\"Warning: The simulation will run forever. \"\n         \"Generated ERT main won't simulate model step behavior. \"\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\n  fflush((NULL));\n  while (1) {\n    /*  Perform application tasks here */\n  }\n\n  /* The option 'Remove error status field in real-time model data structure'\n   * is selected, therefore the following code does not need to execute.\n   */\n\n  /* Terminate model */\n  example_detumbling_terminate();\n  return 0;\n}\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"example_detumbling.c","type":"source","group":"model","path":"/home/samuel/UW-Orbital/simulation-dev/sat-sim/unused_files/example_detumbling_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: example_detumbling.c\n *\n * Code generated for Simulink model 'example_detumbling'.\n *\n * Model version                  : 1.8\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Nov 12 15:25:21 2022\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex-A\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. Safety precaution\n *    3. RAM efficiency\n *    4. ROM efficiency\n * Validation result: Not run\n */\n\n#include \"example_detumbling.h\"\n#include \"rtwtypes.h\"\n\n/* Block signals and states (default storage) */\nDW_example_detumbling_T example_detumbling_DW;\n\n/* External inputs (root inport signals with default storage) */\nExtU_example_detumbling_T example_detumbling_U;\n\n/* External outputs (root outports fed by signals with default storage) */\nExtY_example_detumbling_T example_detumbling_Y;\n\n/* Model step function */\nvoid example_detumbling_step(void)\n{\n  real_T rtb_Diff;\n  real_T rtb_Sign;\n  real_T rtb_TSamp;\n\n  /* Signum: '<Root>/Sign' incorporates:\n   *  Inport: '<Root>/error_quat'\n   */\n  if (example_detumbling_U.error_quat[0] < 0.0) {\n    rtb_Sign = -1.0;\n  } else {\n    rtb_Sign = (example_detumbling_U.error_quat[0] > 0.0);\n  }\n\n  /* End of Signum: '<Root>/Sign' */\n\n  /* Outport: '<Root>/torque' incorporates:\n   *  Gain: '<Root>/k_d'\n   *  Gain: '<Root>/k_p'\n   *  Inport: '<Root>/ang_vel'\n   *  Inport: '<Root>/error_quat'\n   *  Product: '<Root>/Product'\n   *  Sum: '<Root>/Sum6'\n   */\n  example_detumbling_Y.torque[0] = 0.2 * example_detumbling_U.error_quat[1] *\n    rtb_Sign + 0.1 * example_detumbling_U.ang_vel[0];\n\n  /* Outport: '<Root>/ang_pos' incorporates:\n   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator'\n   */\n  example_detumbling_Y.ang_pos[0] =\n    example_detumbling_DW.DiscreteTimeIntegrator_DSTATE[0];\n\n  /* SampleTimeMath: '<S1>/TSamp' incorporates:\n   *  Inport: '<Root>/ang_vel'\n   *\n   * About '<S1>/TSamp':\n   *  y = u * K where K = 1 / ( w * Ts )\n   */\n  rtb_TSamp = example_detumbling_U.ang_vel[0] * 5.0;\n\n  /* Sum: '<S1>/Diff' incorporates:\n   *  UnitDelay: '<S1>/UD'\n   *\n   * Block description for '<S1>/Diff':\n   *\n   *  Add in CPU\n   *\n   * Block description for '<S1>/UD':\n   *\n   *  Store in Global RAM\n   */\n  rtb_Diff = rtb_TSamp - example_detumbling_DW.UD_DSTATE[0];\n\n  /* Outport: '<Root>/ang_accel' */\n  example_detumbling_Y.ang_accel[0] = rtb_Diff;\n\n  /* Outport: '<Root>/is_equal' incorporates:\n   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator1'\n   *  Inport: '<Root>/ang_vel'\n   *  RelationalOperator: '<Root>/Equal'\n   */\n  example_detumbling_Y.is_equal[0] =\n    (example_detumbling_DW.DiscreteTimeIntegrator1_DSTATE[0] ==\n     example_detumbling_U.ang_vel[0]);\n\n  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' incorporates:\n   *  Inport: '<Root>/ang_vel'\n   */\n  example_detumbling_DW.DiscreteTimeIntegrator_DSTATE[0] += 0.2 *\n    example_detumbling_U.ang_vel[0];\n\n  /* Update for UnitDelay: '<S1>/UD'\n   *\n   * Block description for '<S1>/UD':\n   *\n   *  Store in Global RAM\n   */\n  example_detumbling_DW.UD_DSTATE[0] = rtb_TSamp;\n\n  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator1' */\n  example_detumbling_DW.DiscreteTimeIntegrator1_DSTATE[0] += 0.2 * rtb_Diff;\n\n  /* Outport: '<Root>/torque' incorporates:\n   *  Gain: '<Root>/k_d'\n   *  Gain: '<Root>/k_p'\n   *  Inport: '<Root>/ang_vel'\n   *  Inport: '<Root>/error_quat'\n   *  Product: '<Root>/Product'\n   *  Sum: '<Root>/Sum6'\n   */\n  example_detumbling_Y.torque[1] = 0.2 * example_detumbling_U.error_quat[2] *\n    rtb_Sign + 0.1 * example_detumbling_U.ang_vel[1];\n\n  /* Outport: '<Root>/ang_pos' incorporates:\n   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator'\n   */\n  example_detumbling_Y.ang_pos[1] =\n    example_detumbling_DW.DiscreteTimeIntegrator_DSTATE[1];\n\n  /* SampleTimeMath: '<S1>/TSamp' incorporates:\n   *  Inport: '<Root>/ang_vel'\n   *\n   * About '<S1>/TSamp':\n   *  y = u * K where K = 1 / ( w * Ts )\n   */\n  rtb_TSamp = example_detumbling_U.ang_vel[1] * 5.0;\n\n  /* Sum: '<S1>/Diff' incorporates:\n   *  UnitDelay: '<S1>/UD'\n   *\n   * Block description for '<S1>/Diff':\n   *\n   *  Add in CPU\n   *\n   * Block description for '<S1>/UD':\n   *\n   *  Store in Global RAM\n   */\n  rtb_Diff = rtb_TSamp - example_detumbling_DW.UD_DSTATE[1];\n\n  /* Outport: '<Root>/ang_accel' */\n  example_detumbling_Y.ang_accel[1] = rtb_Diff;\n\n  /* Outport: '<Root>/is_equal' incorporates:\n   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator1'\n   *  Inport: '<Root>/ang_vel'\n   *  RelationalOperator: '<Root>/Equal'\n   */\n  example_detumbling_Y.is_equal[1] =\n    (example_detumbling_DW.DiscreteTimeIntegrator1_DSTATE[1] ==\n     example_detumbling_U.ang_vel[1]);\n\n  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' incorporates:\n   *  Inport: '<Root>/ang_vel'\n   */\n  example_detumbling_DW.DiscreteTimeIntegrator_DSTATE[1] += 0.2 *\n    example_detumbling_U.ang_vel[1];\n\n  /* Update for UnitDelay: '<S1>/UD'\n   *\n   * Block description for '<S1>/UD':\n   *\n   *  Store in Global RAM\n   */\n  example_detumbling_DW.UD_DSTATE[1] = rtb_TSamp;\n\n  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator1' */\n  example_detumbling_DW.DiscreteTimeIntegrator1_DSTATE[1] += 0.2 * rtb_Diff;\n\n  /* Outport: '<Root>/torque' incorporates:\n   *  Gain: '<Root>/k_d'\n   *  Gain: '<Root>/k_p'\n   *  Inport: '<Root>/ang_vel'\n   *  Inport: '<Root>/error_quat'\n   *  Product: '<Root>/Product'\n   *  Sum: '<Root>/Sum6'\n   */\n  example_detumbling_Y.torque[2] = 0.2 * example_detumbling_U.error_quat[3] *\n    rtb_Sign + 0.1 * example_detumbling_U.ang_vel[2];\n\n  /* Outport: '<Root>/ang_pos' incorporates:\n   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator'\n   */\n  example_detumbling_Y.ang_pos[2] =\n    example_detumbling_DW.DiscreteTimeIntegrator_DSTATE[2];\n\n  /* SampleTimeMath: '<S1>/TSamp' incorporates:\n   *  Inport: '<Root>/ang_vel'\n   *\n   * About '<S1>/TSamp':\n   *  y = u * K where K = 1 / ( w * Ts )\n   */\n  rtb_TSamp = example_detumbling_U.ang_vel[2] * 5.0;\n\n  /* Sum: '<S1>/Diff' incorporates:\n   *  UnitDelay: '<S1>/UD'\n   *\n   * Block description for '<S1>/Diff':\n   *\n   *  Add in CPU\n   *\n   * Block description for '<S1>/UD':\n   *\n   *  Store in Global RAM\n   */\n  rtb_Diff = rtb_TSamp - example_detumbling_DW.UD_DSTATE[2];\n\n  /* Outport: '<Root>/ang_accel' */\n  example_detumbling_Y.ang_accel[2] = rtb_Diff;\n\n  /* Outport: '<Root>/is_equal' incorporates:\n   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator1'\n   *  Inport: '<Root>/ang_vel'\n   *  RelationalOperator: '<Root>/Equal'\n   */\n  example_detumbling_Y.is_equal[2] =\n    (example_detumbling_DW.DiscreteTimeIntegrator1_DSTATE[2] ==\n     example_detumbling_U.ang_vel[2]);\n\n  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' incorporates:\n   *  Inport: '<Root>/ang_vel'\n   */\n  example_detumbling_DW.DiscreteTimeIntegrator_DSTATE[2] += 0.2 *\n    example_detumbling_U.ang_vel[2];\n\n  /* Update for UnitDelay: '<S1>/UD'\n   *\n   * Block description for '<S1>/UD':\n   *\n   *  Store in Global RAM\n   */\n  example_detumbling_DW.UD_DSTATE[2] = rtb_TSamp;\n\n  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator1' */\n  example_detumbling_DW.DiscreteTimeIntegrator1_DSTATE[2] += 0.2 * rtb_Diff;\n}\n\n/* Model initialize function */\nvoid example_detumbling_initialize(void)\n{\n  /* InitializeConditions for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' */\n  example_detumbling_DW.DiscreteTimeIntegrator_DSTATE[0] = 50.0;\n  example_detumbling_DW.DiscreteTimeIntegrator_DSTATE[1] = 50.0;\n  example_detumbling_DW.DiscreteTimeIntegrator_DSTATE[2] = 50.0;\n}\n\n/* Model terminate function */\nvoid example_detumbling_terminate(void)\n{\n  /* (no terminate code required) */\n}\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"example_detumbling.h","type":"header","group":"model","path":"/home/samuel/UW-Orbital/simulation-dev/sat-sim/unused_files/example_detumbling_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: example_detumbling.h\n *\n * Code generated for Simulink model 'example_detumbling'.\n *\n * Model version                  : 1.8\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Nov 12 15:25:21 2022\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex-A\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. Safety precaution\n *    3. RAM efficiency\n *    4. ROM efficiency\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_example_detumbling_h_\n#define RTW_HEADER_example_detumbling_h_\n#ifndef example_detumbling_COMMON_INCLUDES_\n#define example_detumbling_COMMON_INCLUDES_\n#include \"rtwtypes.h\"\n#endif                                 /* example_detumbling_COMMON_INCLUDES_ */\n\n#include \"example_detumbling_types.h\"\n\n/* Block signals and states (default storage) for system '<Root>' */\ntypedef struct {\n  real_T DiscreteTimeIntegrator_DSTATE[3];/* '<Root>/Discrete-Time Integrator' */\n  real_T UD_DSTATE[3];                 /* '<S1>/UD' */\n  real_T DiscreteTimeIntegrator1_DSTATE[3];/* '<Root>/Discrete-Time Integrator1' */\n} DW_example_detumbling_T;\n\n/* External inputs (root inport signals with default storage) */\ntypedef struct {\n  real_T ang_vel[3];                   /* '<Root>/ang_vel' */\n  real_T error_quat[4];                /* '<Root>/error_quat' */\n} ExtU_example_detumbling_T;\n\n/* External outputs (root outports fed by signals with default storage) */\ntypedef struct {\n  real_T torque[3];                    /* '<Root>/torque' */\n  real_T ang_pos[3];                   /* '<Root>/ang_pos' */\n  real_T ang_accel[3];                 /* '<Root>/ang_accel' */\n  boolean_T is_equal[3];               /* '<Root>/is_equal' */\n} ExtY_example_detumbling_T;\n\n/* Block signals and states (default storage) */\nextern DW_example_detumbling_T example_detumbling_DW;\n\n/* External inputs (root inport signals with default storage) */\nextern ExtU_example_detumbling_T example_detumbling_U;\n\n/* External outputs (root outports fed by signals with default storage) */\nextern ExtY_example_detumbling_T example_detumbling_Y;\n\n/* Model entry point functions */\nextern void example_detumbling_initialize(void);\nextern void example_detumbling_step(void);\nextern void example_detumbling_terminate(void);\n\n/*-\n * These blocks were eliminated from the model due to optimizations:\n *\n * Block '<S1>/Data Type Duplicate' : Unused code path elimination\n */\n\n/*-\n * The generated code includes comments that allow you to trace directly\n * back to the appropriate location in the model.  The basic format\n * is <system>/block_name, where system is the system number (uniquely\n * assigned by Simulink) and block_name is the name of the block.\n *\n * Use the MATLAB hilite_system command to trace the generated code back\n * to the model.  For example,\n *\n * hilite_system('<S3>')    - opens system 3\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\n *\n * Here is the system hierarchy for this model\n *\n * '<Root>' : 'example_detumbling'\n * '<S1>'   : 'example_detumbling/Discrete Derivative'\n */\n#endif                                 /* RTW_HEADER_example_detumbling_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"example_detumbling_private.h","type":"header","group":"model","path":"/home/samuel/UW-Orbital/simulation-dev/sat-sim/unused_files/example_detumbling_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: example_detumbling_private.h\n *\n * Code generated for Simulink model 'example_detumbling'.\n *\n * Model version                  : 1.8\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Nov 12 15:25:21 2022\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex-A\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. Safety precaution\n *    3. RAM efficiency\n *    4. ROM efficiency\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_example_detumbling_private_h_\n#define RTW_HEADER_example_detumbling_private_h_\n#include \"rtwtypes.h\"\n#endif                            /* RTW_HEADER_example_detumbling_private_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"example_detumbling_types.h","type":"header","group":"model","path":"/home/samuel/UW-Orbital/simulation-dev/sat-sim/unused_files/example_detumbling_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: example_detumbling_types.h\n *\n * Code generated for Simulink model 'example_detumbling'.\n *\n * Model version                  : 1.8\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Nov 12 15:25:21 2022\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex-A\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. Safety precaution\n *    3. RAM efficiency\n *    4. ROM efficiency\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_example_detumbling_types_h_\n#define RTW_HEADER_example_detumbling_types_h_\n\n/* Model Code Variants */\n#endif                              /* RTW_HEADER_example_detumbling_types_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"rtwtypes.h","type":"header","group":"sharedutility","path":"/home/samuel/UW-Orbital/simulation-dev/sat-sim/unused_files/slprj/ert/_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: rtwtypes.h\n *\n * Code generated for Simulink model 'example_detumbling'.\n *\n * Model version                  : 1.4\n * Simulink Coder version         : 9.7 (R2022a) 13-Nov-2021\n * C/C++ source code generated on : Sat Nov 12 15:11:56 2022\n */\n\n#ifndef RTWTYPES_H\n#define RTWTYPES_H\n\n/* Logical type definitions */\n#if (!defined(__cplusplus))\n#ifndef false\n#define false                          (0U)\n#endif\n\n#ifndef true\n#define true                           (1U)\n#endif\n#endif\n\n/*=======================================================================*\n * Target hardware information\n *   Device type: ARM Compatible->ARM Cortex-A\n *   Number of bits:     char:   8    short:   16    int:  32\n *                       long:  32\n *                       native word size:  32\n *   Byte ordering: LittleEndian\n *   Signed integer division rounds to: Zero\n *   Shift right on a signed integer as arithmetic shift: on\n *=======================================================================*/\n\n/*=======================================================================*\n * Fixed width word size data types:                                     *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\n *=======================================================================*/\ntypedef signed char int8_T;\ntypedef unsigned char uint8_T;\ntypedef short int16_T;\ntypedef unsigned short uint16_T;\ntypedef int int32_T;\ntypedef unsigned int uint32_T;\ntypedef float real32_T;\ntypedef double real64_T;\n\n/*===========================================================================*\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\n *                           real_T, time_T, ulong_T.                        *\n *===========================================================================*/\ntypedef double real_T;\ntypedef double time_T;\ntypedef unsigned char boolean_T;\ntypedef int int_T;\ntypedef unsigned int uint_T;\ntypedef unsigned long ulong_T;\ntypedef char char_T;\ntypedef unsigned char uchar_T;\ntypedef char_T byte_T;\n\n/*===========================================================================*\n * Complex number type definitions                                           *\n *===========================================================================*/\n#define CREAL_T\n\ntypedef struct {\n  real32_T re;\n  real32_T im;\n} creal32_T;\n\ntypedef struct {\n  real64_T re;\n  real64_T im;\n} creal64_T;\n\ntypedef struct {\n  real_T re;\n  real_T im;\n} creal_T;\n\n#define CINT8_T\n\ntypedef struct {\n  int8_T re;\n  int8_T im;\n} cint8_T;\n\n#define CUINT8_T\n\ntypedef struct {\n  uint8_T re;\n  uint8_T im;\n} cuint8_T;\n\n#define CINT16_T\n\ntypedef struct {\n  int16_T re;\n  int16_T im;\n} cint16_T;\n\n#define CUINT16_T\n\ntypedef struct {\n  uint16_T re;\n  uint16_T im;\n} cuint16_T;\n\n#define CINT32_T\n\ntypedef struct {\n  int32_T re;\n  int32_T im;\n} cint32_T;\n\n#define CUINT32_T\n\ntypedef struct {\n  uint32_T re;\n  uint32_T im;\n} cuint32_T;\n\n/*=======================================================================*\n * Min and Max:                                                          *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *=======================================================================*/\n#define MAX_int8_T                     ((int8_T)(127))\n#define MIN_int8_T                     ((int8_T)(-128))\n#define MAX_uint8_T                    ((uint8_T)(255U))\n#define MAX_int16_T                    ((int16_T)(32767))\n#define MIN_int16_T                    ((int16_T)(-32768))\n#define MAX_uint16_T                   ((uint16_T)(65535U))\n#define MAX_int32_T                    ((int32_T)(2147483647))\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\n\n/* Block D-Work pointer type */\ntypedef void * pointer_T;\n\n#endif                                 /* RTWTYPES_H */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"}]};